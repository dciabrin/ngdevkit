;;;
;;; nullsound - modular sound driver
;;; Copyright (c) 2024-2025 Damien Ciabrini
;;; This file is part of ngdevkit
;;;
;;; ngdevkit is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as
;;; published by the Free Software Foundation, either version 3 of the
;;; License, or (at your option) any later version.
;;;
;;; ngdevkit is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public License
;;; along with ngdevkit.  If not, see <http://www.gnu.org/licenses/>.

;;; precalc buffers, addresses aligned to speed up 16-bit indexing
;;;

        .module nullsound

        .area  CODE

        .bndry  256


;;; Convert note flat representation to <octave,semitone> representation
;;; ------
;;; Precalc for 8 octaves
        .bndry  128
note_to_octave_semitone::
        .db     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b
        .db     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b
        .db     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b
        .db     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b
        .db     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b
        .db     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b
        .db     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b
        .db     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b


;;; fixed-point sine precalc
;;; ------
;;; a 64 entries (128bytes) signed fixed point precalc of sin(x) for x in [0..2*pi],
;;; encoded as [-1.0..1.0] as [s..iffffffff....]. This serves as a base increment
;;; for vibrato displacement from 1..16, which yields a 9bits fixed point for
;;; displacement of the current NSS note
        .bndry  128
sine::
        .dw     0x0000, 0x0190, 0x0310, 0x04a0, 0x0610, 0x0780, 0x08e0, 0x0a20
        .dw     0x0b50, 0x0c50, 0x0d40, 0x0e10, 0x0ec0, 0x0f40, 0x0fb0, 0x0fe0
        .dw     0x1000, 0x0fe0, 0x0fb0, 0x0f40, 0x0ec0, 0x0e10, 0x0d40, 0x0c50
        .dw     0x0b50, 0x0a20, 0x08e0, 0x0780, 0x0610, 0x04a0, 0x0310, 0x0190
        .dw     0x8000, 0x8190, 0x8310, 0x84a0, 0x8610, 0x8780, 0x88e0, 0x8a20
        .dw     0x8b50, 0x8c50, 0x8d40, 0x8e10, 0x8ec0, 0x8f40, 0x8fb0, 0x8fe0
        .dw     0x9000, 0x8fe0, 0x8fb0, 0x8f40, 0x8ec0, 0x8e10, 0x8d40, 0x8c50
        .dw     0x8b50, 0x8a20, 0x88e0, 0x8780, 0x8610, 0x84a0, 0x8310, 0x8190


;;; Delta factor for all possible fractional semitones
;;; ------
;;; Internally nullsound works with decimal semitones (8:8 fixed point) to encode
;;; the tune shift of a note after FX (e.g. pitch, vibrato, slide...)
;;; There are 128 possible fractional semitones between two integer semitones.
;;;
;;; The frequency F (in Hz) of a decimal semitone s is given as:
;;;          F(s) = 440 * 2^(s/12)
;;;
;;; From there, we can derive the value to use for configuring SSG or FM as:
;;;        SSG(s) = s_factor / F(s)
;;;         FM(s) = f_factor * F(s)
;;; but this values can also be expressed as a position (a 'delta') between the
;;; values of the two closest integer semitones, with delta in [0..1[
;;;
;;; The value associated to a decimal semitone is _not_ a linear interpolation
;;; between the value of the closest integer semitones, however the delta of
;;; a decimal semitone is the same for all subsequent integer semitones, so
;;; we can use that precomputed delta to output a precise YM2610 value for
;;; every decimal semitone.

;;; SSG tune delta for all 128 fractional semitones
ssg_tune_deltas::
        .dw     0x0000, 0x020e, 0x041d, 0x062b, 0x0839, 0x0a47, 0x0c55, 0x0e62
        .dw     0x106f, 0x127c, 0x1489, 0x1695, 0x18a2, 0x1aae, 0x1cb9, 0x1ec5
        .dw     0x20d0, 0x22db, 0x24e6, 0x26f0, 0x28fb, 0x2b05, 0x2d0f, 0x2f18
        .dw     0x3122, 0x332b, 0x3534, 0x373c, 0x3945, 0x3b4d, 0x3d55, 0x3f5d
        .dw     0x4164, 0x436b, 0x4572, 0x4779, 0x4980, 0x4b86, 0x4d8c, 0x4f92
        .dw     0x5198, 0x539d, 0x55a2, 0x57a7, 0x59ac, 0x5bb0, 0x5db4, 0x5fb8
        .dw     0x61bc, 0x63c0, 0x65c3, 0x67c6, 0x69c9, 0x6bcb, 0x6dce, 0x6fd0
        .dw     0x71d2, 0x73d3, 0x75d5, 0x77d6, 0x79d7, 0x7bd8, 0x7dd8, 0x7fd9
        .dw     0x81d9, 0x83d8, 0x85d8, 0x87d7, 0x89d7, 0x8bd5, 0x8dd4, 0x8fd3
        .dw     0x91d1, 0x93cf, 0x95cc, 0x97ca, 0x99c7, 0x9bc4, 0x9dc1, 0x9fbe
        .dw     0xa1ba, 0xa3b6, 0xa5b2, 0xa7ae, 0xa9a9, 0xaba4, 0xad9f, 0xaf9a
        .dw     0xb195, 0xb38f, 0xb589, 0xb783, 0xb97c, 0xbb76, 0xbd6f, 0xbf68
        .dw     0xc161, 0xc359, 0xc551, 0xc749, 0xc941, 0xcb39, 0xcd30, 0xcf27
        .dw     0xd11e, 0xd315, 0xd50b, 0xd701, 0xd8f7, 0xdaed, 0xdce3, 0xded8
        .dw     0xe0cd, 0xe2c2, 0xe4b6, 0xe6ab, 0xe89f, 0xea93, 0xec87, 0xee7a
        .dw     0xf06d, 0xf261, 0xf453, 0xf646, 0xf838, 0xfa2a, 0xfc1c, 0xfe0e

;;; FM F-num delta for all 128 fractional semitones
fm_fnum_deltas::
        .dw     0x0000, 0x01f1, 0x03e3, 0x05d5, 0x07c7, 0x09b9, 0x0bac, 0x0d9e
        .dw     0x0f92, 0x1185, 0x1378, 0x156c, 0x1760, 0x1954, 0x1b49, 0x1d3d
        .dw     0x1f32, 0x2127, 0x231c, 0x2512, 0x2708, 0x28fe, 0x2af4, 0x2cea
        .dw     0x2ee1, 0x30d8, 0x32cf, 0x34c6, 0x36be, 0x38b6, 0x3aae, 0x3ca6
        .dw     0x3e9e, 0x4097, 0x4290, 0x4489, 0x4683, 0x487c, 0x4a76, 0x4c70
        .dw     0x4e6a, 0x5065, 0x5260, 0x545b, 0x5656, 0x5851, 0x5a4d, 0x5c49
        .dw     0x5e45, 0x6041, 0x623e, 0x643b, 0x6638, 0x6835, 0x6a33, 0x6c30
        .dw     0x6e2e, 0x702c, 0x722b, 0x742a, 0x7628, 0x7828, 0x7a27, 0x7c27
        .dw     0x7e26, 0x8026, 0x8227, 0x8427, 0x8628, 0x8829, 0x8a2a, 0x8c2c
        .dw     0x8e2d, 0x902f, 0x9231, 0x9434, 0x9636, 0x9839, 0x9a3c, 0x9c3f
        .dw     0x9e43, 0xa047, 0xa24b, 0xa44f, 0xa653, 0xa858, 0xaa5d, 0xac62
        .dw     0xae67, 0xb06d, 0xb273, 0xb479, 0xb67f, 0xb886, 0xba8d, 0xbc94
        .dw     0xbe9b, 0xc0a2, 0xc2aa, 0xc4b2, 0xc6ba, 0xc8c3, 0xcacb, 0xccd4
        .dw     0xcedd, 0xd0e7, 0xd2f0, 0xd4fa, 0xd704, 0xd90f, 0xdb19, 0xdd24
        .dw     0xdf2f, 0xe13a, 0xe346, 0xe551, 0xe75d, 0xe96a, 0xeb76, 0xed83
        .dw     0xef90, 0xf19d, 0xf3aa, 0xf5b8, 0xf7c6, 0xf9d4, 0xfbe2, 0xfdf1


;;; Semitone frequency table
;;; ------
;;; For SSG channels, a note is encoded in the YM2610 as a 12bit value
;;; inversely proportional to the note's frequency in Hz:
;;;         note_ym2610 = (8M/64)/note_frequency
;;; In order to encode all frequencies faithfully (8*12 semitones * 128 shifts),
;;; nullsound represents a note by a 24bit value (12:12 fixed point) and relies
;;; on note distances (24bits) and a delta table (16bits) to compute the final
;;; 12bit integer value for the YM2610.

;;; SSG tune table for AES masterclock (8M=8055943)
        .bndry 256
ssg_dists_lsb::
        ;;         C-n,    C#n,    D-n,    D#n,    E-n,    F-n,    F#n,    G-n,    G#n,    A-n,    A#n,    B-n
        .dw     0x806e, 0xbe70, 0x0754, 0x5a80, 0xb75f, 0x1d66, 0x8c11, 0x02e4, 0x816a, 0x0735, 0x93db, 0x26fb, 0, 0, 0, 0
        .dw     0x806e, 0xbe70, 0x0754, 0x5a80, 0xb75f, 0x1d66, 0x8c11, 0x02e4, 0x816a, 0x0735, 0x93db, 0x26fb, 0, 0, 0, 0
        .dw     0xc037, 0x5f38, 0x03aa, 0xad40, 0x5bb0, 0x0eb3, 0xc608, 0x8172, 0x40b5, 0x039b, 0xc9f0, 0x937b, 0, 0, 0, 0
        .dw     0x601b, 0x2f9c, 0x01d5, 0xd6a0, 0xadd8, 0x875a, 0x6304, 0x40b9, 0x205a, 0x01ce, 0xe4f9, 0xc9bc, 0, 0, 0, 0
        .dw     0xb00e, 0x97ce, 0x80ea, 0x6b50, 0x56ec, 0x43ad, 0x3182, 0x205d, 0x102d, 0x00e7, 0xf27b, 0xe4df, 0, 0, 0, 0
        .dw     0xd807, 0xcbe7, 0xc075, 0xb5a8, 0xab76, 0xa1d7, 0x98c1, 0x902e, 0x8817, 0x8073, 0x793e, 0x726f, 0, 0, 0, 0
        .dw     0x6c04, 0x65f3, 0x603b, 0x5ad4, 0x55bb, 0x50eb, 0x4c61, 0x4817, 0x440b, 0x403a, 0x3c9f, 0x3937, 0, 0, 0, 0
        .dw     0x3602, 0x32fa, 0x301d, 0x2d6a, 0x2ade, 0x2875, 0x2631, 0x240b, 0x2206, 0x201d, 0x1e4f, 0x1c9c, 0, 0, 0, 0
        .bndry 256
ssg_tunes_msb::
        ;;         C-n,    C#n,    D-n,    D#n,    E-n,    F-n,    F#n,    G-n,    G#n,    A-n,    A#n,    B-n
        .dw     0xf097, 0xe317, 0xd658, 0xca51, 0xbef7, 0xb43f, 0xaa22, 0xa096, 0x9793, 0x8f11, 0x870a, 0x7f76, 0, 0, 0, 0
        .dw     0xf097, 0xe317, 0xd658, 0xca51, 0xbef7, 0xb43f, 0xaa22, 0xa096, 0x9793, 0x8f11, 0x870a, 0x7f76, 0, 0, 0, 0
        .dw     0x784f, 0x718f, 0x6b30, 0x652c, 0x5f7f, 0x5a23, 0x5515, 0x504f, 0x4bcd, 0x478c, 0x4389, 0x3fbf, 0, 0, 0, 0
        .dw     0x3c2b, 0x38cb, 0x359c, 0x329a, 0x2fc3, 0x2d15, 0x2a8e, 0x282b, 0x25ea, 0x23ca, 0x21c8, 0x1fe3, 0, 0, 0, 0
        .dw     0x1e19, 0x1c69, 0x1ad2, 0x1951, 0x17e5, 0x168e, 0x154b, 0x1419, 0x12f9, 0x11e9, 0x10e8, 0x0ff5, 0, 0, 0, 0
        .dw     0x0f10, 0x0e38, 0x0d6d, 0x0cac, 0x0bf6, 0x0b4b, 0x0aa9, 0x0a10, 0x0980, 0x08f8, 0x0878, 0x07fe, 0, 0, 0, 0
        .dw     0x078c, 0x0720, 0x06ba, 0x065a, 0x05ff, 0x05a9, 0x0558, 0x050c, 0x04c4, 0x0480, 0x0440, 0x0403, 0, 0, 0, 0
        .dw     0x03ca, 0x0394, 0x0361, 0x0331, 0x0303, 0x02d8, 0x02b0, 0x028a, 0x0266, 0x0244, 0x0224, 0x0205, 0, 0, 0, 0
        .bndry 128
ssg_tunes_lsb::
        ;;       C-n,  C#n,  D-n,  D#n,  E-n,  F-n,  F#n,  G-n,  G#n,  A-n,  A#n,  B-n
        .db     0xc2, 0x54, 0xe4, 0x90, 0x10, 0xb1, 0x4b, 0x3a, 0x56, 0xec, 0xb7, 0xdc, 0, 0, 0, 0
        .db     0xc2, 0x54, 0xe4, 0x90, 0x10, 0xb1, 0x4b, 0x3a, 0x56, 0xec, 0xb7, 0xdc, 0, 0, 0, 0
        .db     0xe1, 0xaa, 0x72, 0xc8, 0x88, 0xd8, 0x25, 0x1d, 0xab, 0xf6, 0x5b, 0x6b, 0, 0, 0, 0
        .db     0xf0, 0xd5, 0x39, 0x64, 0xc4, 0xec, 0x92, 0x8e, 0xd5, 0x7b, 0xad, 0xb4, 0, 0, 0, 0
        .db     0xf8, 0xea, 0x1c, 0x32, 0xe2, 0xf6, 0x49, 0xc7, 0x6a, 0x3d, 0x56, 0xdb, 0, 0, 0, 0
        .db     0xfc, 0xf5, 0x0e, 0x99, 0xf1, 0x7b, 0xa4, 0xe3, 0xb5, 0x9e, 0x2b, 0xed, 0, 0, 0, 0
        .db     0x7e, 0x7a, 0x87, 0x4c, 0x78, 0xbd, 0xd2, 0x71, 0x5a, 0x4f, 0x15, 0x76, 0, 0, 0, 0
        .db     0x3f, 0x3d, 0x43, 0x26, 0xbc, 0xde, 0x69, 0x38, 0x2d, 0x27, 0x0a, 0xbb, 0, 0, 0, 0
        .bndry 128
ssg_dists_msb::
        ;;       C-n,  C#n,  D-n,  D#n,  E-n,  F-n,  F#n,  G-n,  G#n,  A-n,  A#n,  B-n
        .db     0x0d, 0x0c, 0x0c, 0x0b, 0x0a, 0x0a, 0x09, 0x09, 0x08, 0x08, 0x07, 0x07, 0, 0, 0, 0
        .db     0x0d, 0x0c, 0x0c, 0x0b, 0x0a, 0x0a, 0x09, 0x09, 0x08, 0x08, 0x07, 0x07, 0, 0, 0, 0
        .db     0x06, 0x06, 0x06, 0x05, 0x05, 0x05, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0, 0, 0, 0
        .db     0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0, 0, 0, 0
        .db     0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0, 0, 0, 0
        .db     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0
        .db     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0
        .db     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0


;;; F-num frequency table
;;; ------
;;; A note can be seen as a tuple <octave,semitone>. Likewise, its frequency F in Hz
;;; can be decomposed as a F(note) = 2^octave * F(semitone)
;;; Likewise, FM channels encode a note as a 14bits tuple `block * F-num`, where:
;;; block (3bits) is the octave and F-num (11bits) is a factor of the semitone's
;;; frequency for the first octave.
;;;         F-num = ((144*2^20)/8M) * semitone_frequency
;;;         block = 2^(octave-1)
;;; With this representation, we just need 12 precomputed entries to represent
;;; acurately the frequency of all semitones for all octaves.
;;; In order to encode all frequencies faithfully (12 semitones * 128 shifts),
;;; nullsound represents a F-num by a 23bit value (11:12 fixed point) and relies
;;; on note distances (23bits) and a delta table (16bits) to compute the final
;;; 11bit F-num value for the YM2610.

;;; FM F-num table for AES masterclock (8M=8055943)
fm_fnums::
        .db     0xee, 0x56, 0x26    ; C-n
        .db     0x52, 0x9e, 0x28    ; C#n
        .db     0x7e, 0x08, 0x2b    ; D-n
        .db     0x17, 0x97, 0x2d    ; D#n
        .db     0x1d, 0x4d, 0x30    ; E-n
        .db     0xf8, 0x2b, 0x33    ; F-n
        .db     0x7c, 0x36, 0x36    ; F#n
        .db     0xd3, 0x6f, 0x39    ; G-n
        .db     0xe4, 0xd9, 0x3c    ; G#n
        .db     0x20, 0x78, 0x40    ; A-n
        .db     0x0c, 0x4d, 0x44    ; A#n
        .db     0x01, 0x5d, 0x48    ; B-n
        .db     0xe7, 0xa9, 0x4c    ; C-n+1
fm_dists::
        .db     0x64, 0x47, 0x02    ; C-n
        .db     0x2c, 0x6a, 0x02    ; C#n
        .db     0x99, 0x8e, 0x02    ; D-n
        .db     0x06, 0xb6, 0x02    ; D#n
        .db     0xdb, 0xde, 0x02    ; E-n
        .db     0x84, 0x0a, 0x03    ; F-n
        .db     0x57, 0x39, 0x03    ; F#n
        .db     0x11, 0x6a, 0x03    ; G-n
        .db     0x3c, 0x9e, 0x03    ; G#n
        .db     0xec, 0xd4, 0x03    ; A-n
        .db     0xf5, 0x0f, 0x04    ; A#n
        .db     0xe6, 0x4c, 0x04    ; B-n
